using System;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Imgur.API.Authentication;
using Imgur.API.Models;
using Imgur.API.RequestBuilders;

namespace Imgur.API.Endpoints
{
    /// <summary>
    /// Authorizes account access.
    /// </summary>
    public class OAuth2Endpoint : EndpointBase, IOAuth2Endpoint
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Minor Code Smell", "S1075:URIs should not be hardcoded", Justification = "<Pending>")]
        internal const string AuthorizationEndpointUrl = "https://api.imgur.com/oauth2/authorize";
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Minor Code Smell", "S1075:URIs should not be hardcoded", Justification = "<Pending>")]
        internal const string TokenEndpointUrl = "https://api.imgur.com/oauth2/token";

        /// <summary>
        /// Declares a new instance of the endpoint.
        /// </summary>
        /// <param name="apiClient"></param>
        /// <param name="httpClient"></param>
        public OAuth2Endpoint(IApiClient apiClient, HttpClient httpClient) : base(
            apiClient, httpClient)
        {
        }

        /// <summary>
        /// Creates an authorization url that can be used to authorize access to a user's account.
        /// </summary>
        /// <param name="state">Any state which may be useful to your application upon receipt of the response.</param>
        /// <returns></returns>
        public string GetAuthorizationUrl(string state = null)
        {
            var url = $"{AuthorizationEndpointUrl}?client_id={_apiClient.ClientId}&response_type=token&state={state}";
            return url;
        }

        /// <summary>
        /// If a user has authorized their account but you no longer have a valid access token for them,
        /// then a new one can be generated by using the refresh token.
        /// </summary>
        /// <param name="refreshToken"></param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        public Task<IOAuth2Token> GetTokenAsync(string refreshToken,
                                                CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(refreshToken))
            {
                throw new ArgumentNullException("refreshToken", nameof(refreshToken));
            }

            if (string.IsNullOrWhiteSpace(_apiClient.ClientSecret))
            {
                throw new InvalidOperationException(ClientSecretRequiredExceptionMessage);
            }

            return GetTokenInternalAsync(refreshToken, cancellationToken);
        }

        internal async Task<IOAuth2Token> GetTokenInternalAsync(string refreshToken,
                                                                CancellationToken cancellationToken = default)
        {
            using (var request = OAuth2RequestBuilder.GetTokenRequest(TokenEndpointUrl,
                                                                      refreshToken,
                                                                      _apiClient.ClientId,
                                                                      _apiClient.ClientSecret))
            {
                var httpResponse = await _httpClient.SendAsync(request, cancellationToken)
                                                    .ConfigureAwait(false);

                httpResponse.EnsureSuccessStatusCode();

                var response = await httpResponse.Content.ReadAsStringAsync()
                                                         .ConfigureAwait(false);

                return _responseConverter.ConvertOAuth2TokenResponse(response);
            }
        }
    }
}
