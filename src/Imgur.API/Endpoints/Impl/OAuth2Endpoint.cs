using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Imgur.API.Authentication;
using Imgur.API.Models;
using Imgur.API.Models.Impl;

namespace Imgur.API.Endpoints.Impl
{
    /// <summary>
    ///     Authorizes account access.
    /// </summary>
    public class OAuth2Endpoint : EndpointBase, IOAuth2Endpoint
    {
        /// <summary>
        ///     The OAuth2 Authorization Endpoint.
        /// </summary>
        private const string AuthorizationEndpoint = "https://api.imgur.com/oauth2/authorize";

        /// <summary>
        ///     The OAuth2 Token Endpoint.
        /// </summary>
        private const string TokenEndpoint = "https://api.imgur.com/oauth2/token";

        /// <summary>
        ///     Creates an authorization url that can be used to authorize access to a user's account.
        /// </summary>
        /// <param name="oAuth2ResponseType">Determines if Imgur returns a Code, a PIN code, or an opaque Token.</param>
        /// <param name="state">
        ///     This optional parameter indicates any state which may be useful to your application upon receipt of
        ///     the response.
        /// </param>
        /// <returns></returns>
        public string GetAuthorizationUrl(OAuth2ResponseType oAuth2ResponseType, string state)
        {
            var endpointUrl = "{0}?client_id={1}&response_type={2}&state={3}";
            endpointUrl = string.Format(endpointUrl, AuthorizationEndpoint, ApiAuthentication.ClientId, oAuth2ResponseType, state);
            return endpointUrl;
        }

        /// <summary>
        ///     After the user authorizes, the pin is returned as a code to your application
        ///     via the redirect URL you specified during registration, in the form of a regular query string parameter.
        ///     <para>Keep in mind that you can use localhost as a redirect URL.</para>
        /// </summary>
        /// <param name="code">The code from the query string.</param>
        /// <returns></returns>
        public async Task<IOAuth2Token> GetTokenByCode(string code)
        {
            var parameters = new Dictionary<string, string>
            {
                {"client_id", ApiAuthentication.ClientId},
                {"client_secret", ApiAuthentication.ClientSecret},
                {"grant_type", "authorization_code"},
                {"code", code}
            };

            var content = new FormUrlEncodedContent(parameters.ToArray());
            var token = await MakeEndpointRequestAsync<OAuth2Token>(HttpMethod.Post, TokenEndpoint, content);
            return token;
        }

        /// <summary>
        /// After the user authorizes, they will receive a PIN code that they copy into your app. 
        /// Get the access token from the PIN.
        /// </summary>
        /// <param name="pin">The PIN that the user is prompted to enter.</param>
        /// <returns></returns>
        public async Task<IOAuth2Token> GetTokenByPin(string pin)
        {
            var parameters = new Dictionary<string, string>
            {
                {"client_id", ApiAuthentication.ClientId},
                {"client_secret", ApiAuthentication.ClientSecret},
                {"grant_type", "pin"},
                {"pin", pin}
            };

            var content = new FormUrlEncodedContent(parameters.ToArray());
            var token = await MakeEndpointRequestAsync<OAuth2Token>(HttpMethod.Post, TokenEndpoint, content);
            return token;
        }

        /// <summary>
        /// If a user has authorized their account but you no longer have a valid access_token for them, 
        /// then a new one can be generated by using the refresh_token.
        /// <para>When your application receives a refresh token, it is important to store 
        /// that refresh token for future use. </para>
        /// <para>If your application loses the refresh token, you will have to prompt the user 
        /// for their login information again.</para>
        /// </summary>
        /// <returns></returns>
        public async Task<IOAuth2Token> GetTokenByRefreshToken(string refreshToken)
        {
            var parameters = new Dictionary<string, string>
            {
                {"client_id", ApiAuthentication.ClientId},
                {"client_secret", ApiAuthentication.ClientSecret},
                {"grant_type", "refresh_token"},
                {"refresh_token", refreshToken}
            };

            var content = new FormUrlEncodedContent(parameters.ToArray());
            var token = await MakeEndpointRequestAsync<OAuth2Token>(HttpMethod.Post, TokenEndpoint, content);
            return token;
        }

        /// <summary>
        ///     Initializes a new instance of the OAuth2Endpoint class.
        /// </summary>
        /// <param name="authentication"></param>
        public OAuth2Endpoint(IApiAuthentication authentication) : base(authentication)
        {
        }
    }
}